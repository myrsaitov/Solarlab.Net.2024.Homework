Ссылка на ссылки за весь курс:
https://docs.google.com/document/d/14pnrG9hy8bXgPSJIgZzkuBKcaxoNDcgjITYPE85tQcc/edit#heading=h.uourmnqeedqw


Архитектура должна раскрывать структуру системы, но не раскрывать реализацию.

18:32
Подходы:
- Монолит (легаси)
- Модульный (многослойный)
- Многослойная архитектура:
    Часто 3хслойка:
        - слой представления
		- слой бизнес-логики
		- слой БД
		
		Интерфейс - это некий контракт, по которому вы обязуетесь рализовать такие-то методы
		
		Не смешивать разные типы компонентов на одном уровне
 
 18:48
 Доменные сущности, вокруг которых строится все приложение
 
 Паттерн - Репозиторий - представляет интерфейс для работы с объектом - CRUD-операции.
 
 
 Принципы дезайна архитектуры: SOLID, KISS, DRY, YAGNI
 
 S - Принцип единой ответственности
 O - Классы должны быть открыты для расширения и закрыты для модификации
 L - классы-наследники не должны менять поведение базового класса: от наследников ожидать поведения базового класса.
 I - принцип разделение интерфейсов.
 
 
 
 19:03
 Важно!
 Шаблоны проектирования GOF
 Методы рефакторинга, "запахи кода"
 
 19:07
 Работа через New привязывает в классу, поэтому использовать интерфейсы
 
 IoC
 Слабосвязанный код
 
 19:33
 Генерация WebAPI
 [v] Использовать контроллеры
 MinimalAPI
 
 
19:38
  Раньше было ConfigureServices и Configure, Startup(скрыт теперь)
 
  Builder -это паттерн по GOF
  
  Program -> Main (Middleware):
      Конвеер обработки запросов:
  
  
  AddControllers - регистрирует все контроллеры
  
  Контроллер - это эдпоинт, т.е. точка доступа к нашему приложению.
  Если отключаем использование контроллеров, то методы вызываются через корневой объект - MinimalAPI